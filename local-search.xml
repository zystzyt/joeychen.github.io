<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用 vellum 完成我的世界地图备份和渲染网页地图</title>
    <link href="/posts/2091446885/"/>
    <url>/posts/2091446885/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-vellum-完成我的世界地图备份和渲染"><a href="#使用-vellum-完成我的世界地图备份和渲染" class="headerlink" title="使用 vellum 完成我的世界地图备份和渲染"></a>使用 vellum 完成我的世界地图备份和渲染</h1><h2 id="安装-vellum"><a href="#安装-vellum" class="headerlink" title="安装 vellum"></a>安装 vellum</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>浏览器打开vellum仓库</p><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/clarkx86/</span>vellum/releases</code></pre><p>找到 <em>vellum_linux-x64-bundled_v目前版本.zip</em> 鼠标右键复制链接地址，回到服务器输入以下指令：<br> <pre><code class="hljs shell">mkdir vellum; \cd vellum; \wget https://github.com/clarkx86/vellum/releases/download/v1.2.3/vellum_linux-x64-bundled_v目前版本.zip; \unzip vellum_linux-x64-bundled_v目前版本.zip; \chmod +x ./vellum; \./vellum</code></pre></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>vellum目录会生成 <em>configuration.json</em> 的文件，这是我们要配置的。下面是每一项的描述：</p><pre><code class="hljs asciidoc">KEY               VALUE               ABOUT----------------------------------------------------------必要设置-----------------BdsBinPath         String  (!)        基岩服务器启动文件路径，比如（<span class="hljs-code">  Linux的&quot;/../../bedrock_server&quot;</span><span class="hljs-code">  Windows的 &quot;/../../bedrock_server.exe&quot;）</span>WorldName          String  (!)        要备份的世界名字，在 /worlds/里<span class="hljs-code">                                      填写的是世界的名字不是路径</span>---------------备份设置---------------EnableBackups      Boolean (!)        备份文件是否保存为 .zip 格式。BackupInterval     Double             距离上次备份的间隔时间，以“分钟”为单位。ArchivePath        String             创建备份的保存路径。BackupsToKeep      Integer            保留在“ArchivePath”也就是备份路径里的备份数量，<span class="hljs-code">  超过这个数量会把旧备份删除掉.</span><span class="hljs-code">  </span>OnActiviyOnly      Boolean            如果设置为“true”，vellum只会在上次备份后至少有<span class="hljs-code">  一个玩家连接的情况下执行备份，以便只存档实际修改过的世界。</span>StopBeforeBackup   Boolean            是否停止服务器进行备份，备份完成后自动重启服务器<span class="hljs-code">                                      而不是进行热备份。</span>NotifyBeforeStop   Integer            停止服务器进行备份之前，在游戏聊天窗口广播服务器停<span class="hljs-code">  止倒计时，以秒为单位。</span>BackupOnStartup    Boolean            是否在服务器启动之前进行备份，强烈建议将此设置<span class="hljs-code">                                      保留为“ true”。</span>PreExec            String             每次备份开始前执行的指令，可选。PostExec           String             每次备份结束后执行的指令，可选。---------------渲染世界地图设置---------------EnableRenders      Boolean (!)        是否使用 “PapyrusCS” 渲染世界地图。PapyrusBinPath     String             PapyrusCS所在文件目录，比如（<span class="hljs-code">                                      Linux的&quot;/../../PapyrusCs&quot; </span><span class="hljs-code">                                      Windows的&quot;/../../PapyrusCs.exe&quot;）。</span>PapyrusOutputPath  String             渲染后世界地图文件输出路径。RenderInterval     Double             距离上次渲染的间隔世界，以分钟为单位。PapyrusGlobalArgs  String             执行渲染的全局参数，请勿更改已经提供<span class="hljs-code">                                      的--world和--ouput参数                                      </span><span class="hljs-code">                                      详细参数详解参考以下链接：</span><span class="hljs-code">                                      https://github.com/mjungnickel18/papyruscs</span><span class="hljs-code">                                      </span>PapyrusTasks       String [Array]     papyrus 的附加参数数组，其中每个数组<span class="hljs-code">  条目在前一个完成后会执行另一个PapyrusCS过程</span><span class="hljs-code">  （例如，用于渲染多个尺寸）</span>-------------------其他设置-------------------QuietMode          Boolean (!)        禁止通知游戏中的玩家<span class="hljs-strong">*vellum*</span>正在创建备份和渲染HideStdout         Boolean (!)        是否隐藏PapyrusCS渲染过程生成的控制台输出，<span class="hljs-code">  将其设置为“ true”可能有助于调试您的配置。</span>BusyCommands       Boolean (!)        在vellum进行备份时是否允许执行BDS命令CheckForUpdates    Boolean (!)        是否在启动时检查更新StopBdsOnException Boolean (!)        如果* vellum <span class="hljs-strong">*运行异常而意外崩溃，</span><span class="hljs-strong">  是否向BDS进程发送“stop”命令，</span><span class="hljs-strong">  以防止其继续以分离模式运行。</span><span class="hljs-strong">----------------------------------------------------------</span><span class="hljs-strong">*</span>标有（！）的值为必填项</code></pre><h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;BdsBinPath&quot;</span>: <span class="hljs-string">&quot;/root/mc/bedrock_server&quot;</span>,  <span class="hljs-attr">&quot;WorldName&quot;</span>: <span class="hljs-string">&quot;Bedrock level&quot;</span>,  <span class="hljs-attr">&quot;Backups&quot;</span>: &#123;    <span class="hljs-attr">&quot;EnableBackups&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;BackupInterval&quot;</span>: <span class="hljs-number">60.0</span>,    <span class="hljs-attr">&quot;ArchivePath&quot;</span>: <span class="hljs-string">&quot;./backupsmc/&quot;</span>,    <span class="hljs-attr">&quot;BackupsToKeep&quot;</span>: <span class="hljs-number">10</span>,    <span class="hljs-attr">&quot;OnActivityOnly&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;StopBeforeBackup&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;NotifyBeforeStop&quot;</span>: <span class="hljs-number">60</span>,    <span class="hljs-attr">&quot;BackupOnStartup&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;PreExec&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-attr">&quot;PostExec&quot;</span>: <span class="hljs-string">&quot;&quot;</span>  &#125;,  <span class="hljs-attr">&quot;Renders&quot;</span>: &#123;    <span class="hljs-attr">&quot;EnableRenders&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;PapyrusBinPath&quot;</span>: <span class="hljs-string">&quot;/root/papyruscs/PapyrusCs&quot;</span>,    <span class="hljs-attr">&quot;PapyrusOutputPath&quot;</span>: <span class="hljs-string">&quot;constructmc&quot;</span>,    <span class="hljs-attr">&quot;RenderInterval&quot;</span>: <span class="hljs-number">60.0</span>,    <span class="hljs-attr">&quot;PapyrusGlobalArgs&quot;</span>: <span class="hljs-string">&quot;-w $WORLD_PATH -o $OUTPUT_PATH --htmlfile index.html -f png -q 100 --deleteexistingupdatefolder&quot;</span>,    <span class="hljs-attr">&quot;PapyrusTasks&quot;</span>: [      <span class="hljs-string">&quot;--dim 0&quot;</span>    ]  &#125;,  <span class="hljs-attr">&quot;QuietMode&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;HideStdout&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;BusyCommands&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;CheckForUpdates&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;StopBdsOnException&quot;</span>: <span class="hljs-literal">true</span>&#125;</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>configuration.json配置完成后运行vellum<br> <pre><code class="hljs shell">./vellum</code></pre></p><h2 id="参数与命令"><a href="#参数与命令" class="headerlink" title="参数与命令"></a>参数与命令</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p> 可用启动参数概述：</p><pre><code class="hljs asciidoc">PARAMETER                             ABOUT-----------------------------------------------------------c | --configuration                  指定自定义配置文件。 <span class="hljs-code"> （默认：configuration.json）</span>-h | --help                           打印可用参数的概述。</code></pre><p>参数是可选的，如果未指定，则默认为默认值</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p> vellum还提供了一些新功能，并重载了一些现有命令，您可以执行这些命令来强制调用备份或渲染任务并计划服务器关闭。</p><pre><code class="hljs asciidoc"><span class="hljs-code"> COMMAND                               ABOUT</span>----------------------------------------------------------force start backup                    强制执行备份force start render                    强制PapyrusCS渲染世界stop &lt;time in seconds&gt;                安排服务器关闭并在游戏中通知玩家reload vellum                         重新加载先前指定的（或默认的）配置文件updatecheck                           获取最新的BDS和vellum版本并将其显示在控制台中</code></pre>]]></content>
    
    
    <categories>
      
      <category>Minecraft</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>vellum</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux执行.sh文件出现cd xxx\r ：No such file or directory</title>
    <link href="/posts/2343020999/"/>
    <url>/posts/2343020999/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux执行-sh文件出现cd-xxx-r-：No-such-file-or-directory"><a href="#Linux执行-sh文件出现cd-xxx-r-：No-such-file-or-directory" class="headerlink" title="Linux执行.sh文件出现cd xxx\r ：No such file or directory"></a>Linux执行.sh文件出现cd xxx\r ：No such file or directory</h1><p>为了方便通常会在windows系统下创建好shell文件后上传到linux服务器里运行。运行后报错：No such file or directory（无此文件或目录）。大多是因为2个不同系统直接所用的文件格式不对应导致的。</p><p>来到Linux服务器端，输入以下指令查看文件格式。</p><pre><code class="hljs shell">cd File Directory   #“File Directory”为.sh文件所在的目录vi File name.sh     #“File name”为报错的.sh文件名</code></pre><p>在命令模式下，也就是刚进去时的界面输入：</p><pre><code class="hljs shell">:set ff   #查看文件格式</code></pre><p>如返回值为 fileformat=dos ，输入以下指令把 “dos” 设置为 “unix” :</p><pre><code class="hljs shell">:set ff=unix   #把.sh文件格式设置为unix：wq           #保存并退出vim编辑器</code></pre><p>这时候在执行以下.sh文件就不会出问题了。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>shell</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下操作ln -s指令出现File exists的解决方法</title>
    <link href="/posts/3982553368/"/>
    <url>/posts/3982553368/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>操作ln -s给文件创建软链接时会出现以下情况，xxx文件以存在。</p><pre><code class="hljs shell">ln: failed to create symbolic link &#x27;/usr/bin/xxx&#x27;: File exists</code></pre><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><pre><code class="hljs shell">rm -rf /usr/bin/xxx</code></pre><p>再进行ln -s操作就解决了。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
